* Chapter 1

** Transformation RGB -> mit matrix

 RGB -> HSV doesn't work
 RGB -> XYZ, YIQ, YUC we can use matrix transformation
 RGB -> LAB needs a transformation to XYZ first before transformating to LAB

** What for?

 HSV: use it to improve quality
 LAB: use it to get a color space which is true to perception

* Chapter 2

** Histogramme

*** Definition & Properties

X axis = value
Y axis = sum

Normiertes Histogramm:
every x value shows the amount of pixels with that value

Cumulative Histogramm:
Every x value is the cumulative sum of all previous occurrences

P(g) = occurrences divided by total pixels (normierte Histogramm)
Median = for (value : table) p(value) * it_index 

** Bildverbesserung

*** GrauwertSpreizung

first clamp the values to our new scale, for example the grey scale image only has values
between 75 and 225 then we normalize them to a 0-150 range by subtracting 75 from them.
With this range we normalize it on a 0-1 scale now we fill out the 0-1 scale fully and from
this we can multiply by 255 to get a good 0-255 scale and this way we improved the contrast
of the image.

#+BEGIN_SRC matlab
I = imread('pout.tif');
figure, imshow(I); * show image

I2 = imadjust(I); * adjust contrast
figure, imhist(I2); * show histogramm

# map values from the range on the left to the range on the right
 X = imadjust(I, [low_in, high_in], [low_out, high_out])
#+END_SRC

 Spreizung Min=1% bis Max=99% bedeutet das die ersten 1% der Werte weggelassen wird und die
 letzte 1% weggelassen wird.

*** Gammakorrektur

Werte unter 1 sorgen fuer eine Aufhellung, Werte ueber 1 eine Verdunkelung

lambda < 1: Spreizung der dunkleren und Stauchung der helleren Werte.
lambda > 1: Umgekehrt


#+BEGIN_SRC matlab
# do gamma correcting in matlab
 J = imadjust(I, [low_in, high_in], [low_out, high_out], gamme);
#+END_SRC

 Benutzen wenn es eine Ueberrepresentation Werter in dem dunklen oder hellen Bereich.

*** Histogrammlinearisierung

Entropiemaximierung: Fachbegriff Histogrammeaequivilation


Nehme das Kumulatieve Histogramm und aendere die y scala zu 0-255. Dan nehmen wir den Wert auf der 
y achse als unseren neuen Grauwert fuer den Wert auf x.


*** Stretching bei Farbbild

Wir nehmen den HSV Farbbereich damit wir die Helligkeit trennen koennen von den Farben,
sonst wurde bei der Spreizung sich die Farbe aendern.

Mann kann Saturation oder Value stretchen. Meistens wird Saturation aber nicht gestretched.


** Pixelbasierte Operationen

*** Schwellwertbasiertes Binning

Von vielen zu weniger Farben transformieren: bsp. 12bit -> 8bit

*** Otsu

Benutzt beim Binning.

  
** Summary

Pixelbasierte Operationen:
Ein Algorithmus der nur auf Basis der Pixelinformation arbeitet.

(w_{max} - w_{min}_) * ((g - g_{min}) / (g_{max} - g_{min}))

\frac{g - g_{min}}{g_{max} - g_{min}}

Bild f, Pixelposition sei (x,y)

=f(x, y) -> f'(x, y)=
zum Beispiel Kontrastanpassungen auf Basis des Histogramms und Gammakorrektur.

* Chapter 3  
  
** Was ist ein Filter
   
=ROI= Region of interest.

Beispiel 3x3 ROI.

+--+--+--+
|  |  |  |
+--+--+--+
|  |  |  |
+--+--+--+
|  |  |  |
+--+--+--+

Die ROI wird Pixel pro Pixel weiter bewogen und fuer jeden Pixel wird also die Operation ausgefuehrt.

f =

+--+---+----+
|10|20 |100 |
+--+---+----+
|50|100|100 |
+--+---+----+
|10|80 |120 |
+--+---+----+

#+BEGIN_SRC python
f = [[10, 20, 100], [50, 100, 100], [10, 80, 120]]
#+END_SRC

h =
\begin{bmatrix}
1 & 1 & 1 \\
1 & 1 & 1 \\
1 & 1 & 1
\end{bmatrix}

#+BEGIN_SRC python
h = [[1, 1, 1], [1, 1, 1], [1, 1, 1]]
#+END_SRC

#+BEGIN_SRC python

res = []

for u in range(-1, 1):
    for v in range(-1, 1):
        res[u][v] = f[2-u][2-v] * h[u][v]
#+END_SRC

Das ist eine Convolution.

*** Faltung

f_{1}, f_{2} sei =100x100= Pixel, h sei =5x5= => pro Pixel 25 Multiplikationen & 24 Additionen.

a_{1} * f_{1} => 100^{2} Multiplikationen
a_{2} * f_{2} => 100^{2} Multiplikationen

h * f_{1} => 100^{2} * 25
h * f_{2} => 100^{2} * 25

a_{1} * (h * f_{1}) => 100^{2} + 100^{2} * 25
a_{2} * (h * f_{2}) => 100^{2} + 100^{2} * 25

a_{1} * (h * f_{1}) + a_{2} * (h * f_{2})
= 2 * 100^{2} + 2 * 100^{2} * 25
= 2 * 100^{2} * (1 + 25)
= 52 * 100^{2} Multiplikationen

h * (a_{1} * f_{1} + a_{2} * f_{2}) = 2 * 100^{2} + 25 * 100^{2} = 100^{2} * 27 Multiplikationen


Beispiel effizienz Steigerung

1/9 *
\begin{bmatrix}
1 & 1 & 1 \\
1 & 1 & 1 \\
1 & 1 & 1
\end{bmatrix}
=
1/3 *
\begin{bmatrix}
1 \\
1 \\
1
\end{bmatrix} * 1/3 *
\begin{bmatrix}
1 & 1 & 1
\end{bmatrix}

links 9 Multiplikationen vs rechts 3 und 3

** Glaettungsfilter (Summenfilter)

*** Gaussfilter
    
Pixel in der Mitte am staerksten betont.

** Kantenfilter (Differenzfilter)
   
*** Kantenfilter
    
\[\frac{delta f}{delta x}
= \frac{f(x, y) - f(x - 1, y)}{1}
\]

Wie sieht die Filtermatrix bzw Filter aus?

\[1 * f(x, y) + (-1) * f(x-1, y)
= (-1) * (f(x-1, y) + 1 * f(x, y) + 0 * f(x + 1, y)

h_{180} =
\begin{bmatrix}
-1 & 1 & 0
\end{bmatrix}

h =
\begin{bmatrix}
0 & 1 & -1
\end{bmatrix}
\]

Vorwaertsgradient

\[\frac{delta f}{delta x}
= f(x + 1, y) - f(x, y)
= 0 * f(x - 1, y) + (-1) * f(x, y) + 1 * f(x + 1, y)
=> f * h
h_{180} =
\begin{bmatrix}
0 & -1 & 1)
\end{bmatrix}

h = h_{0} =
\begin{bmatrix}
1 & -1 & 0
\end{bmatrix}

\]

f * h             h?
**** Differenzen in x-richtung
     
vertikale Kante.

**** Differenzen in y-richtung
     
horizontale Kante.

**** Laplacefilter
     
Andere Beispiels Laplacefilter

\begin{bmatrix}
0 & 1 & 0 \\
1 & -1 & 1 \\
0 & 1 & 0
\end{bmatrix}

\begin{bmatrix}
1 & 1 & 1 \\
1 & -8 & 1 \\
1 & 1 & 1
\end{bmatrix}

**** Sobeloperatoren
     
Extrahieren Kanten mit Vorzugsrichtungen und gleichzeitiger Glaettung.

**** Marr Hildreth Kantendetekrot
     
\begin{bmatrix}
1 & 0.5 & 0.2 \\
0.1 & 0.1 & 0.2 \\
0.4 & -0.1 & -0.2
\end{bmatrix}

***** Zero crossing

Eine Linie wobei das signum von Negative auf Positiv oder andersrum geht.

Folie 35 Antwort zu zero crossing.

Einer reicht um zero crossing zu haben

**** Canny Edge Detector
     
Horizontale Kanten <= h_{y} =
\begin{bmatrix}
1 & 2 & 1 \\
0 & 0 & 0 \\
-1 & -2 & -1
\end{bmatrix}

Vertikale Kante h_{x} =
\begin{bmatrix}
1 & 0 & -1 \\
2 & 0 & -2 \\
1 & 0 & -1
\end{bmatrix}

Laenge des  Vektors:
sqrt(G_{x}^{2} + G_{y}^{2})

Winkel des Vektors

arctan(G_{y} / G_{x})

Keine relevanten Kantenpixel
\begin{bmatrix}
0 & \dots & T_{1}
\end{bmatrix}

Schwache Kantenpixel
\begin{bmatrix}
>T_{1} & \dots & T_{2}
\end{bmatrix}

Starke Kantenpixel
\begin{bmatrix}
>T_{2} & \dots & 1024
\end{bmatrix}



** Nicht lineare Filter


   
** Summary

- Glaettungsfilter
  - Mittelwerstfilter
  - Binomial- bzw. Gaussfilter
- Kantenfilter
  - Faltungsoperatoren
  - Marr Hildreth Operator
  - Canny Edge Operator
- Nicht lineare Filter
  - Median
  - Minimum
  - Maximum
